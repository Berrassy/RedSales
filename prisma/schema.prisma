// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                String   @id @default(cuid())
  refProduit        String   @unique @map("ref_produit")
  libelle           String   @map("libelle")
  categorie         String   @map("categorie")
  prixPromo         Float    @map("prix_promo")
  originalPrice     Float    @map("original_price")
  discountPercentage Int     @map("discount_percentage")
  totalStock        Int      @map("total_stock")
  totalSales        Int      @map("total_sales")
  totalSalesValue   Float    @map("total_sales_value")
  ratioSKE          String?  @map("ratio_ske")
  ratioTotal        String?  @map("ratio_total")
  isFeatured        Boolean  @default(false) @map("is_featured")
  isAlmostSoldOut   Boolean  @default(false) @map("is_almost_sold_out")
  image             String?
  description       String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Stock by location
  stockFrimoda      Int      @default(0) @map("stock_frimoda")
  stockCasa         Int      @default(0) @map("stock_casa")
  stockRabat        Int      @default(0) @map("stock_rabat")
  stockMarrakech    Int      @default(0) @map("stock_marrakech")
  stockTanger       Int      @default(0) @map("stock_tanger")
  stockBouskoura    Int      @default(0) @map("stock_bouskoura")
  stockWarehouse57  Int      @default(0) @map("stock_warehouse57")

  // Computed fields for available cities
  availableCities   String[] @default([]) @map("available_cities")
  primaryCity       String?  @map("primary_city")

  // Relations
  cartItems    CartItem[]
  wishlistItems WishlistItem[]
  orderItems   OrderItem[]

  @@map("products")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model City {
  id        String   @id @default(cuid())
  name      String   @unique
  code      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cities")
}

model ApiSync {
  id          String   @id @default(cuid())
  lastSync    DateTime @map("last_sync")
  totalProducts Int    @map("total_products")
  success     Boolean  @default(false)
  errorMessage String? @map("error_message")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("api_syncs")
}

// Authentication Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole  @default(CLIENT)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
  wishlist      WishlistItem[]
  orders        Order[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Cart and Order Models
model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String   @map("cart_id")
  productId String   @map("product_id")
  quantity  Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  status      OrderStatus @default(PENDING)
  totalAmount Float       @map("total_amount")
  shippingAddress String? @map("shipping_address")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String   @map("order_id")
  productId String   @map("product_id")
  quantity  Int
  price     Float
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum UserRole {
  CLIENT
  ADMIN
}